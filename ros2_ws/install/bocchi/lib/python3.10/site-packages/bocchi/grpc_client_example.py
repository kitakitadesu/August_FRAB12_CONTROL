#!/usr/bin/env python3
"""
Example gRPC client for testing the ROS2 keyboard publisher.
This demonstrates how to connect to and interact with the gRPC keyboard service.
"""

import grpc
import time
import sys
import threading
from bocchi.proto import keyboard_pb2, keyboard_pb2_grpc


class KeyboardClient:
    def __init__(self, server_address='localhost:50051'):
        """Initialize the gRPC client"""
        self.server_address = server_address
        self.channel = None
        self.stub = None
        self.connected = False
        
    def connect(self):
        """Connect to the gRPC server"""
        try:
            print(f"Connecting to gRPC server at {self.server_address}...")
            self.channel = grpc.insecure_channel(self.server_address)
            self.stub = keyboard_pb2_grpc.KeyboardServiceStub(self.channel)
            
            # Test the connection by getting status
            request = keyboard_pb2.StatusRequest()
            response = self.stub.GetStatus(request)
            self.connected = True
            print(f"✓ Connected successfully!")
            print(f"  Server running: {response.server_running}")
            print(f"  Connected clients: {response.connected_clients}")
            print(f"  Version: {response.version}")
            print(f"  Uptime: {response.uptime} seconds")
            return True
            
        except grpc.RpcError as e:
            print(f"✗ Failed to connect: {e.details()}")
            self.connected = False
            return False
        except Exception as e:
            print(f"✗ Connection error: {e}")
            self.connected = False
            return False
    
    def send_key(self, key, key_code):
        """Send a single key press"""
        if not self.connected:
            print("Not connected to server")
            return False
            
        try:
            request = keyboard_pb2.KeyRequest(
                key=key,
                key_code=key_code,
                timestamp=int(time.time() * 1000)
            )
            
            response = self.stub.SendKey(request)
            
            if response.success:
                print(f"✓ Key sent: '{key}' (code: {key_code}) - {response.message}")
            else:
                print(f"✗ Key failed: {response.message}")
                
            return response.success
            
        except grpc.RpcError as e:
            print(f"✗ gRPC error sending key: {e}")
            return False
        except Exception as e:
            print(f"✗ Error sending key: {e}")
            return False
    
    def stream_keys(self):
        """Start bidirectional streaming of keys"""
        if not self.connected:
            print("Not connected to server")
            return
            
        try:
            print("Starting key streaming mode...")
            print("Type keys and press Enter to send them (type 'quit' to exit)")
            
            def request_generator():
                while True:
                    try:
                        user_input = input("Enter key (or 'quit'): ").strip()
                        if user_input.lower() in ['quit', 'exit', 'q']:
                            break
                            
                        # Handle special keys
                        key = user_input
                        if user_input.upper() == 'SPACE':
                            key_code = 32
                        elif user_input.upper() == 'ENTER':
                            key_code = 13
                        elif user_input.upper() == 'ESC':
                            key_code = 27
                        elif len(user_input) == 1:
                            key_code = ord(user_input)
                        else:
                            key_code = 0
                            
                        request = keyboard_pb2.KeyRequest(
                            key=key,
                            key_code=key_code,
                            timestamp=int(time.time() * 1000)
                        )
                        yield request
                        
                    except KeyboardInterrupt:
                        break
                    except Exception as e:
                        print(f"Input error: {e}")
                        break
            
            # Start streaming
            responses = self.stub.StreamKeys(request_generator())
            
            for response in responses:
                if response.success:
                    print(f"  Server response: {response.message}")
                else:
                    print(f"  Server error: {response.message}")
                    
        except grpc.RpcError as e:
            print(f"✗ Streaming error: {e}")
        except KeyboardInterrupt:
            print("\nStreaming interrupted by user")
        except Exception as e:
            print(f"✗ Streaming error: {e}")
    
    def get_status(self):
        """Get server status"""
        if not self.connected:
            print("Not connected to server")
            return None
            
        try:
            request = keyboard_pb2.StatusRequest()
            response = self.stub.GetStatus(request)
            
            print(f"Server Status:")
            print(f"  Running: {response.server_running}")
            print(f"  Connected clients: {response.connected_clients}")
            print(f"  Version: {response.version}")
            print(f"  Uptime: {response.uptime} seconds")
            
            return response
            
        except grpc.RpcError as e:
            print(f"✗ Status error: {e}")
            return None
        except Exception as e:
            print(f"✗ Status error: {e}")
            return None
    
    def disconnect(self):
        """Disconnect from the server"""
        if self.channel:
            self.channel.close()
            self.connected = False
            print("Disconnected from server")


def main():
    """Main function with interactive menu"""
    print("=== ROS2 gRPC Keyboard Client ===")
    
    # Parse command line arguments
    server_address = 'localhost:50051'
    if len(sys.argv) > 1:
        server_address = sys.argv[1]
    
    client = KeyboardClient(server_address)
    
    # Connect to server
    if not client.connect():
        print("Failed to connect. Make sure the gRPC server is running.")
        return
    
    try:
        while True:
            print("\n" + "="*50)
            print("Choose an option:")
            print("1. Send single key")
            print("2. Start key streaming")
            print("3. Get server status")
            print("4. Send quick test keys")
            print("5. Quit")
            print("="*50)
            
            try:
                choice = input("Enter choice (1-5): ").strip()
                
                if choice == '1':
                    key = input("Enter key: ").strip()
                    if key:
                        if len(key) == 1:
                            key_code = ord(key)
                        elif key.upper() == 'SPACE':
                            key_code = 32
                        elif key.upper() == 'ENTER':
                            key_code = 13
                        elif key.upper() == 'ESC':
                            key_code = 27
                        else:
                            key_code = 0
                        
                        client.send_key(key, key_code)
                
                elif choice == '2':
                    client.stream_keys()
                
                elif choice == '3':
                    client.get_status()
                
                elif choice == '4':
                    print("Sending test keys...")
                    test_keys = [
                        ('a', 97),
                        ('b', 98),
                        ('SPACE', 32),
                        ('1', 49),
                        ('2', 50)
                    ]
                    
                    for key, code in test_keys:
                        client.send_key(key, code)
                        time.sleep(0.5)
                    
                    print("Test keys sent!")
                
                elif choice == '5' or choice.lower() == 'q':
                    print("Quitting...")
                    break
                
                else:
                    print("Invalid choice. Please enter 1-5.")
                    
            except KeyboardInterrupt:
                print("\nOperation interrupted")
                break
            except Exception as e:
                print(f"Error: {e}")
    
    finally:
        client.disconnect()


if __name__ == '__main__':
    main()